#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <unordered_map>
#include <limits>

using namespace std;


const int MAX_COLS = 100;


// sortowanie na rozne sposoby (impelemntacja funkcji z algorytmiki)
// wypisywanie do innego pliku
// stworzenie tego jako menu
// tworzenie bibliotek z funkcjami
// ewentualnie tworzenie jakies obiektowki?
// implementacje szukania najwiekszego elementu/najmniejszego/najczesciej powtarzalnego


//funckcje pomocniczne


void sortowanieBabelkowe(int* tab, int n, int tryb){
    for(int i = 0; i<n-1; i++){
        for(int j=0; j<n-i-1;j++){
            if(tryb==1){ //sortowanie rosnaco
                if(tab[j]>tab[j+1]){
                    int temp= tab[j];
                    tab[j] =tab[j+1];
                    tab[j+1] =temp;
                }
            }
            else{ //sortowanie malejaco
                if(tab[j]<tab[j+1]){
                    int temp =tab[j];
                    tab[j] =tab[j+1];
                    tab[j+1] =temp;
                }
            }
        }
    }
}
void wypelnij_tablice(int* tab, int n, int a, int b){
    for(int i =0; i<n; i++){
        tab[i] =rand()%(b-a+1)+a;
    }
}

void wyswietl_tablice(int* tab, int n){
    for(int i = 0;i<n;i++){
        cout<<tab[i]<<" ";
    }
    cout<<endl;
}
void przydziel_pamiec(int*& tab, int n){
    tab =new int[n];
}
void zwolnij_pamiec(int*& tab){
    delete[] tab;
    tab = nullptr;
}
void sortowanie_i_wyswietlanie(int* tab, int n, int tryb){
    cout<<"tablica przed sortowaniem: ";
    wyswietl_tablice(tab,n);
    sortowanieBabelkowe(tab,n,tryb);

    cout<<"tablica po sortowaniu: ";
    wyswietl_tablice(tab,n);
}

void sortowaniePrzezWybor(int *tab, int n, int tryb){
    for(int i=0; i<n-1; i++){
        int indeks = i;
        for(int j=i+1; j<n; j++){
            if((tryb == 1 && tab[j] < tab[indeks]) || (tryb == 2 && tab[j] > tab[indeks])){
                indeks = j;
            }
        }
        if(indeks !=i){
            swap(tab[i], tab[indeks]);
        }
    }
}
void sortowanie_przez_wstawianie(int* tab, int n, bool rosnaco) {
    for (int i = 1; i < n; i++) {
        int temp = tab[i];
        int j = i - 1;
        while (j >= 0 && ((rosnaco && tab[j] > temp) || (!rosnaco && tab[j] < temp))) {
            tab[j + 1] = tab[j];
            j--;
        }
        tab[j + 1] = temp;
    }
}

void sortuj_i_wyswietl(int* tab, int n, bool rosnaco) {
    sortowanie_przez_wstawianie(tab, n, rosnaco);
    cout << "Tablica posortowana " << (rosnaco ? "rosnąco:" : "malejąco:") << std::endl;
    wyswietl_tablice(tab, n);
}


//funkcje pomocniczne dla 2d tablicy




void wyswietl(int **tab, int n, int m) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << tab[i][j] << " ";
        }
        cout << endl;
    }
}

void sortowanie_przez_wstawianie2d(int **tab, int n, int m, int kolumna, bool malejaco) {
    for (int i = 0; i < n; i++) {
        int j = i;
        while (j > 0 && ((malejaco && tab[j][kolumna] > tab[j-1][kolumna]) || (!malejaco && tab[j][kolumna] < tab[j-1][kolumna]))) {
            for (int k = 0; k < m; k++) {
                swap(tab[j][k], tab[j-1][k]);
            }
            j--;
        }
    }
}


//funkcje pomocniczne



void test2(){
    ifstream input("output.txt");
    if (!input.is_open()) {
        cerr << "Nie udalo sie otworzyc pliku\n";
    }

    int max_num = numeric_limits<int>::min();
    int min_num = numeric_limits<int>::max();
    unordered_map<int, int> freq_map;

    int number;
    while (input >> number) {
        max_num = max(max_num, number);
        min_num = min(min_num, number);
        freq_map[number]++;
    }

    cout << "Najwiekszy element: " << max_num << endl;
    cout << "Najmniejszy element: " << min_num << endl;

    auto max_freq = max_element(freq_map.begin(), freq_map.end(),
                                [](const auto& p1, const auto& p2) {
                                    return p1.second < p2.second;
                                });

    cout << "Najczesciej powtarzajacy sie element: " << max_freq->first
         << " (liczba wystapien: " << max_freq->second << ")" << endl;
}

void zadanie2_2(){
    int n,a,b,tryb;
    int* tab = nullptr;

    cout<<"Podaj rozmiar tablicy: ";
    cin>>n;

    cout<<"Podaj przedzial <a,b> z ktorego beda losowane liczby: ";
    cin>>a>>b;
    cout<<"Wybierz tryb sortowania (1-rosnaco, 2-malejjaco: ";
    cin>>tryb;
    //wywolanie pomocniczych dla zadania 2.2
    przydziel_pamiec(tab,n);
    srand(time(nullptr));
    wypelnij_tablice(tab,n,a,b);
    sortowanie_i_wyswietlanie(tab,n,tryb);
    zwolnij_pamiec(tab);
}
void zadanie2_3(){
    srand(time(nullptr));
    int n,a,b,tryb;
    cout<<"podaj rozmiar tablicy: ";
    cin>>n;
    cout<<"podaj przedzial <a,b>";
    cin>>a>>b;
    cout<<"Podaj tryb sortowania (1-rosnacio, 2-malejaco): ";
    cin>>tryb;
    int *tab = new int[n];
    wypelnij_tablice(tab,n,a,b);
    cout<<"tablica przed sortowaniem\n";
    wyswietl_tablice(tab,n);
    sortowaniePrzezWybor(tab,n,tryb);
    cout<<"tablica po sortowaniu:\n";
    wyswietl_tablice(tab,n);
    zwolnij_pamiec(tab);

}
void zadanie2_4(){
    int rozmiar, a, b;
    bool rosnaco;

    cout << "Podaj rozmiar tablicy: ";
    cin >> rozmiar;

    cout << "Podaj przedział <a,b> (oddzielone spacja): ";
    cin >> a >> b;

    cout << "Podaj tryb sortowania (0 - malejaco, 1 - rosnaco): ";
    cin >> rosnaco;

    int* tablica = new int[rozmiar];
    wypelnij_tablice(tablica, rozmiar, a, b);

    cout << "Tablica przed sortowaniem:" << std::endl;
    wyswietl_tablice(tablica, rozmiar);

    sortuj_i_wyswietl(tablica, rozmiar, rosnaco);

    delete[] tablica;
}
void zadanie2_5() {
    srand(time(nullptr));

    int n, m, a, b, kolumna;
    bool malejaco;

    cout << "Podaj liczbe wierszy i kolumn tablicy: ";
    cin >> n >> m;

    cout << "Podaj przedzial <a,b> dla liczb losowych: ";
    cin >> a >> b;

    cout << "Podaj numer kolumny do posortowania (numeracja od 0): ";
    cin >> kolumna;

    cout << "Czy sortowac malejaco? (1-tak, 0-nie): ";
    cin >> malejaco;

    // przydzielenie pamieci
    int **tab = new int *[n];
    for (int i = 0; i < n; i++) {
        tab[i] = new int[m];
    }

    // wypelnienie tablicy losowymi liczbami
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            tab[i][j] = rand() % (b - a + 1) + a;
        }
    }

    // wyswietlenie tablicy przed sortowaniem
    cout << "Tablica przed sortowaniem:" << endl;
    wyswietl(tab, n, m);

    // sortowanie przez wstawianie
    sortowanie_przez_wstawianie2d(tab, n, m, kolumna, malejaco);

    // wyswietlenie tablicy po sortowaniu
    cout << "Tablica po sortowaniu:" << endl;
    wyswietl(tab, n, m);

    // zwolnienie pamieci w odzielnej funkcji bo mi sie juz nie chcialo
    for (int i = 0; i < n; i++) {
        delete[] tab[i];
    }
    delete[] tab;
}


// Funkcja zapisująca pseudolosowe liczby do pliku
void saveRandomNumbersToFile(int count, string filename) {
    ofstream file(filename);
    if (file.is_open()) {
        srand(time(NULL));
        for (int i = 0; i < count; i++) {
            file << rand() % 10000000 << " ";
        }
        file.close();
        cout << "Zapisano " << count << " liczb w pliku: " << filename << endl;
    } else {
        cout << "Blad, nie mozna otworzyc pliku: " << filename << endl;
    }
}

// Funkcja wczytująca liczby z pliku i tworząca z nich tablicę 2D
int** readNumbersFromFile(string filename, int& rows, int& cols) {
    ifstream file(filename);
    if (file.is_open()) {
        int count = 0;
        int num;
        while (file >> num) {
            count++;
        }
        file.clear();   // resetujemy flagi błędów
        file.seekg(0);  // ustawiamy wskaźnik odczytu na początku pliku

        cols = MAX_COLS; // inicjalizacja liczby kolumn

        // wyliczenie liczby wierszy
        rows = count / cols;
        if (count % cols != 0) {
            rows++;
        }

        int** arr = new int*[rows];
        for (int i = 0; i < rows; i++) {
            arr[i] = new int[cols];
            for (int j = 0; j < cols; j++) {
                if (file >> num) {
                    if (j > 0) { // pomiń pierwszą kolumnę
                        arr[i][j-1] = num;
                    }
                } else {
                    arr[i][j] = 0;
                }
            }
        }
        file.close();
        cout << "Wczytuje " << count << " liczb z pliku: " << filename << endl;
        return arr;
    } else {
        cout << "Blad, nie mozna otworzyc pliku:  " << filename << endl;
        return NULL;
    }
}


// Funkcja sortująca tablicę 2D rosnąco
void sort2DArray(int** arr, int rows, int cols) {
    int size = rows * cols;
    int* temp = new int[size];
    int k = 0;
    for (int j = 0; j < cols; j++) {
        for (int i = 0; i < rows; i++) {
            temp[k++] = arr[i][j];
        }
    }
    sort(temp, temp + size);
    k = 0;
    for (int j = 0; j < cols; j++) {
        for (int i = 0; i < rows; i++) {
            arr[i][j] = temp[k++];
        }
    }
    delete[] temp;
}
//zapisywanie do pliku
void saveToFile(int** arr, int rows, int cols, string filename) {
    ofstream file(filename);
    if (file.is_open()) {
        for (int j = 0; j < cols; j++) {
            bool hasValues = false; // zmienna określająca, czy dana kolumna zawiera jakieś wartości
            for (int i = 0; i < rows; i++) {
                if (arr[i][j] != 0) { // sprawdzenie, czy dana komórka zawiera wartość inną niż 0
                    hasValues = true;
                    break;
                }
            }
            if (hasValues) { // jeśli kolumna zawiera jakieś wartości, to zostanie zapisana do pliku
                for (int i = 0; i < rows; i++) {
                    file << arr[i][j] << " ";
                }
                file << endl;
            }
        }
        file.close();
        cout << "Zapisano do pliku: " << filename << endl;
    } else {
        cout << "Blad, nie mozna otworzyc pliku: " << filename << endl;
    }
}
void test1(){
    int num;
    cout << "Podaj ilosc liczb do wygenerowania i zapisania do pliku: ";
    cin >> num;
    string filename = "random.txt";
    saveRandomNumbersToFile(num, filename);
    int rows, cols;
    int** arr = readNumbersFromFile(filename, rows, cols);
    if (arr != NULL) {
        sort2DArray(arr, rows, cols);
        saveToFile(arr, rows, cols, "output.txt");
        for (int i = 0; i < rows; i++) {
            delete[] arr[i];
        }
        delete[] arr;
    }
}
int main() {
    int wybor;
    do {
        cout << "Wybierz zadanie do wykonania:" << endl;
        cout << "1) Sortowanie babelkowe" << endl;
        cout << "2) Sortowanie przez wybor" << endl;
        cout << "3) Sortowanie przez wstawianie" << endl;
        cout << "4) Sortowanie tablicy dwuwymiarowej" << endl;
        cout << "5) Tworzenie tablicy 2d zapisywanej w pliku oraz sortowanie jej"<< endl;
        cout << "6) Wyszukiwanie najmniejszego,najwiekszego oraz najczesciej powtarzalnego elementu z tablicy 2d"<< endl;
        cout << "7) Wyjscie z programu" << endl;
        cin >> wybor;
        switch (wybor){
            case 1:
                zadanie2_2();
                break;
            case 2:
                zadanie2_3();
                break;
            case 3:
                zadanie2_4();
                break;
            case 4:
                zadanie2_5();
                break;
            case 5:
                test1();
                break;
            case 6:
                test2();
                break;
            case 7:
                cout<<"Koniec programu!\n";
                break;
            default:
                cout<<"Niepoprawny wybor! Wybierz jeszcze raz.\n";
                break;
        }
        cout<<"\n";

    } while (wybor != 7);


    return 0;
}